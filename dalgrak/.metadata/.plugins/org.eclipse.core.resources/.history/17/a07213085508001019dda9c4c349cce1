package springbootApplication.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class WebPushServiceTest {

    @Mock
    private CustomPushService customPushService;  // CustomPushService를 Mock으로 주입

    @InjectMocks
    private WebPushService webPushService;  // WebPushService를 테스트 대상 객체로 설정

    @Mock
    private HttpResponse mockResponse;  // HttpResponse 객체를 Mock으로 생성

    @Mock
    private StatusLine statusLine;  // StatusLine을 Mock으로 생성

    // setup에서 mock 설정을 최소화
    @BeforeEach
    void setUp() {
        // setUp에서 mockResponse의 상태 코드만 설정. statusLine 설정은 테스트마다 해야 함.
    }

    @Test
    public void sendPushNotification_ShouldSendNotificationSuccessfully() {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // 상태 코드가 201로 설정 (성공적인 경우)
        when(statusLine.getStatusCode()).thenReturn(201);  // statusLine에서 201을 반환하도록 설정
        when(mockResponse.getStatusLine()).thenReturn(statusLine);  // HttpResponse가 상태 라인을 반환하도록 설정
        when(customPushService.send(endpoint, message, auth, p256dh)).thenReturn(mockResponse);  // CustomPushService의 send 메서드 호출

        // When
        webPushService.sendPushNotification(endpoint, message, auth, p256dh);  // WebPushService의 메서드 호출

        // Then
        verify(customPushService, times(1)).send(endpoint, message, auth, p256dh);  // send 메서드가 한 번 호출되었는지 검증
    }

    @Test
    public void sendPushNotification_ShouldFailIfResponseNot201() {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // 상태 코드가 400으로 설정 (실패한 경우)
        when(statusLine.getStatusCode()).thenReturn(400);  // statusLine에서 400을 반환하도록 설정
        when(mockResponse.getStatusLine()).thenReturn(statusLine);  // HttpResponse가 상태 라인을 반환하도록 설정
        when(customPushService.send(endpoint, message, auth, p256dh)).thenReturn(mockResponse);  // CustomPushService의 send 메서드 호출

        // When
        webPushService.sendPushNotification(endpoint, message, auth, p256dh);  // WebPushService의 메서드 호출

        // Then
        verify(customPushService, times(1)).send(endpoint, message, auth, p256dh);  // send 메서드가 한 번 호출되었는지 검증
    }
}
