package springbootApplication.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class WebPushServiceTest {

    @Mock
    private CustomPushService customPushService;  // CustomPushService를 Mock으로 주입

    @InjectMocks
    private WebPushService webPushService;  // WebPushService를 테스트 대상 객체로 설정

    @Mock
    private HttpResponse mockResponse;  // HttpResponse 객체를 Mock으로 생성

    @Mock
    private StatusLine statusLine;  // StatusLine을 Mock으로 생성

    @BeforeEach
    void setUp() {
        // 불필요한 스텁을 제거하거나 lenient()를 사용하여 허용
        lenient().when(mockResponse.getStatusLine()).thenReturn(statusLine);
        lenient().when(statusLine.getStatusCode()).thenReturn(201);
    }

    @Test
    public void sendPushNotification_ShouldFailIfResponseNot201_ErrorCode400() {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // 상태 코드가 400으로 설정 (실패한 경우)
        when(customPushService.send(endpoint, message, auth, p256dh)).thenReturn(mockResponse);  // CustomPushService의 send 메서드 호출

        // When
        webPushService.sendPushNotification(endpoint, message, auth, p256dh);

        // Then
        verify(customPushService, times(1)).send(endpoint, message, auth, p256dh);  // customPushService의 send 메서드가 한 번 호출되었는지 검증
    }


    @Test
    public void sendPushNotification_ShouldFailIfResponseNot201() {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // 상태 코드가 400으로 설정 (실패한 경우)
        when(customPushService.send(endpoint, message, auth, p256dh)).thenReturn(mockResponse); // send 메서드 호출
        when(statusLine.getStatusCode()).thenReturn(400);  // 실패 상태 코드 설정

        // When
        webPushService.sendPushNotification(endpoint, message, auth, p256dh);  // WebPushService 메서드 호출

        // Then
        // 실패 로직이 실행되는지 검증할 수 있습니다. 예: 로그, 예외 처리 등
        // 이 예시에서는 실패 처리만 확인하면 됩니다.
        verify(customPushService, times(1)).send(endpoint, message, auth, p256dh);  // customPushService의 send 메서드가 한 번 호출되었는지 검증
    }

}
