package springbootApplication.service;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import lombok.RequiredArgsConstructor;
import springbootApplication.domain.Reply;
import springbootApplication.repository.ReplyRepository;
import springbootApplication.repository.UserRepository;
import springbootApplication.domain.Comment;
import springbootApplication.repository.CommentRepository;
import java.util.List;

@RequiredArgsConstructor
@Service
public class ReplyService {
    
    private final ReplyRepository replyRepository;
    private final CommentRepository commentRepository;  // 댓글을 조회하기 위한 repository
    private final UserRepository userRepository;  // 사용자 정보를 조회하기 위한 repository
    private final WebPushService webPushService;

    // 특정 댓글의 답글 가져오기
    public List<Reply> getRepliesByCommentId(Long commentId) {
        return replyRepository.findByParentCommentId(commentId);
    }

    // 답글 삭제 (본인만 가능)
    @Transactional
    public void deleteReply(Long replyId, Long userId) {
        Reply reply = replyRepository.findById(replyId)
                .orElseThrow(() -> new RuntimeException("Reply not found"));

        if (!reply.getUserId().equals(userId)) {
            throw new RuntimeException("You can only delete your own reply!");
        }

        replyRepository.delete(reply);
    }

    // 답글 추가
    @Transactional
    public void addReply(Long commentId, Long userId, String content) {
        // 답글 객체 생성
        Reply reply = new Reply(commentId, userId, content);
        replyRepository.save(reply);

        // 해당 댓글의 작성자를 가져오기 (댓글 작성자에게 알림을 보냄)
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new RuntimeException("Comment not found"));

        Long commentAuthorId = comment.getUserId();  // 댓글 작성자의 userId

        // 댓글 작성자에게 푸시 알림 보내기
        sendReplyNotificationToCommentAuthor(commentAuthorId, reply);
    }

    // 댓글 작성자에게 답글 알림 보내기
    private void sendReplyNotificationToCommentAuthor(Long commentAuthorId, Reply reply) {
        // 댓글 작성자 사용자 정보 가져오기
        userRepository.findById(commentAuthorId).ifPresent(user -> {
            // 푸시 알림 보내기
            String endpoint = user.getPushNotificationEndpoint();  // 사용자 푸시 알림 정보
            String auth = user.getPushNotificationAuth();
            String p256dh = user.getPushNotificationP256dh();

            // 알림 메시지 작성
            String message = "Someone replied to your comment: " + reply.getContent();

            // 푸시 알림 전송
            webPushService.sendPushNotification(endpoint, message, auth, p256dh);
        });
    }
}
