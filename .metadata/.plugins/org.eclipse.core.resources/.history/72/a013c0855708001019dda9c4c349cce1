package springbootApplication.service;

import org.apache.http.HttpResponse;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.StatusLine;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mockito;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class CustomPushServiceTest {

    @Mock
    private CloseableHttpClient httpClient;

    @Mock
    private HttpPost httpPost;

    @Mock
    private CloseableHttpResponse httpResponse;  // HttpResponse -> CloseableHttpResponse로 변경

    @Mock
    private StatusLine statusLine;

    @InjectMocks
    private CustomPushService customPushService;

    // 테스트 전 준비 작업
    @BeforeEach
    void setUp() {
        customPushService = new CustomPushService("publicKey", "privateKey", "subject");
    }

    @Test
    public void testSend_SuccessfulPushNotification() throws Exception {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // 상태 코드 201 반환하도록 설정 (성공적인 응답)
        when(statusLine.getStatusCode()).thenReturn(201);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(httpClient.execute(httpPost)).thenReturn(httpResponse);

        // when()에서 HttpPost 객체를 사용할 때 필요한 설정을 Mocking
        when(httpPost.getEntity()).thenReturn(new StringEntity("{\"message\":\"" + message + "\"}"));
        
        // 실제 HTTP 클라이언트 메서드인 execute() 호출을 mock 설정
        when(httpClient.execute(Mockito.any(HttpPost.class))).thenReturn(httpResponse);

        // When
        HttpResponse response = customPushService.send(endpoint, message, auth, p256dh);

        // Then
        assertNotNull(response);
        verify(httpClient, times(1)).execute(Mockito.any(HttpPost.class));
        assertEquals(201, response.getStatusLine().getStatusCode());
    }

    @Test
    public void testSend_FailedPushNotification() throws Exception {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // 상태 코드 400 반환하도록 설정 (실패한 응답)
        when(statusLine.getStatusCode()).thenReturn(400);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(httpClient.execute(httpPost)).thenReturn(httpResponse);

        // when()에서 HttpPost 객체를 사용할 때 필요한 설정을 Mocking
        when(httpPost.getEntity()).thenReturn(new StringEntity("{\"message\":\"" + message + "\"}"));

        // When
        HttpResponse response = customPushService.send(endpoint, message, auth, p256dh);

        // Then
        assertNotNull(response);
        verify(httpClient, times(1)).execute(Mockito.any(HttpPost.class));
        assertEquals(400, response.getStatusLine().getStatusCode());
    }

    @Test
    public void testSend_ExceptionDuringRequest() throws Exception {
        // Given
        String endpoint = "http://example.com/endpoint";
        String message = "Test Push Notification";
        String auth = "auth";
        String p256dh = "p256dh";

        // HttpClient가 예외를 던지는 경우
        when(httpClient.execute(httpPost)).thenThrow(new RuntimeException("Request failed"));

        // When
        HttpResponse response = customPushService.send(endpoint, message, auth, p256dh);

        // Then
        assertNull(response);  // 예외가 발생하면 null을 반환
    }
}
