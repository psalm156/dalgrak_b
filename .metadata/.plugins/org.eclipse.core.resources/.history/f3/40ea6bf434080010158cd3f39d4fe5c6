package springbootApplication.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import springbootApplication.domain.Comment;
import springbootApplication.repository.CommentRepository;
import springbootApplication.repository.UserRepository;
import springbootApplication.service.WebPushService;

@Service
@RequiredArgsConstructor
public class CommentService {

    private final CommentRepository commentRepository;
    private final UserRepository userRepository;
    private final WebPushService webPushService;

    // 특정 게시글의 댓글 가져오기
    public List<Comment> getCommentsByPostId(Long postId) {
        return commentRepository.findByPostId(postId);
    }

    // 댓글 삭제 (본인만 가능)
    @Transactional
    public void deleteComment(Long commentId, Long userId) {
        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new RuntimeException("댓글을 찾을 수 없습니다."));

        if (!comment.getUserId().equals(userId)) {
            throw new RuntimeException("You can only delete your own comment!");
        }

        commentRepository.delete(comment);
    }

  
    @Transactional
    public void addComment(Long postId, Long userId, String content) {
        // 댓글 추가
        Comment comment = new Comment(postId, userId, content);
        commentRepository.save(comment);

        // 알림 메시지
        String notificationMessage = "새 댓글이 작성되었습니다: " + content;

        // 게시글에 달린 모든 댓글을 받아와서 알림 전송
        List<Comment> comments = commentRepository.findByPostId(postId);

        // 모든 댓글 작성자에게 알림 보내기 (게시글 작성자 제외)
        for (Comment c : comments) {
            if (!c.getUserId().equals(userId)) {
                // WebPushService를 이용해 알림 전송
                webPushService.sendPushNotification(c.getUserId(), notificationMessage);
            }
        }
    }
}
